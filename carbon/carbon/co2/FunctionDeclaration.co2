include co2/Declaration
include co2/RefList
include co2/Statement
include co2/ClassDeclaration
include co2/InterfaceDeclaration
include co2/InterfaceMethodDefinition
include co2/FunctionType
include co2/ArgumentDeclaration

class FunctionDeclaration : Declaration {
	Bool binding_generated;
	RefList formal_arguments;
	RefList implemented_methods;
	Statement body;

	FunctionDeclaration (Token name, FunctionType type, RefList formal_arguments, Statement body) {
		super (name);
		self.type = (FunctionType) type.retain ();
		self.formal_arguments = (RefList) formal_arguments.retain ();
		self.body = (Statement) body?.retain ();
		binding_generated = false;
	}

	~FunctionDeclaration () {
		formal_arguments.release ();
		implemented_methods.release ();
		body.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		current_context?.add (self);
		type.accept (visitor);
		formal_arguments.map_args (compileobject_accept, visitor);
		visitor.visit (self);
		current_context?.remove_last ();
	}

	void type_check () {
		current_context?.add (self);
		type.type_check ();
		formal_arguments.map (compileobject_type_check);
		implemented_methods?.map_args (functiondeclaration_type_check_implemented_methods, self);
		body?.type_check ();

		FunctionType function_type = (FunctionType) self.type;
		ClassDeclaration class_decl = (ClassDeclaration) current_context?.find (ClassDeclaration.class);
		InterfaceDeclaration interface_decl = (InterfaceDeclaration) current_context?.find (InterfaceDeclaration.class);
		if (function_type.has_var_args && !class_decl && formal_arguments.length <= 1) {
			error (name, "variable argument list only supported on function with at least one fixed argument.\n");
		}
		if (class_decl) {
			class_decl.interfaces?.map_args (functiondeclaration_find_in_interface, self);
		}
		if (interface_decl) {
			functiondeclaration_find_in_interface_ (interface_decl.name, self);
		}
		current_context?.remove_last ();
	}

	void generate (FILE * fp) {
		functiondeclaration_generateFunction (fp, self);
	}
}

void functiondeclaration_generate_formal_arg (Declaration decl, va_list * app) {
	FILE * fp = va_arg (*app, FILE *);
	Bool * first_formal_arg = va_arg (*app, Bool *);
	if (*first_formal_arg == false) {
		fprintf (fp, ", ");
	}
	*first_formal_arg = false;
	decl.generate (fp);
}

void functiondeclaration_generateFunction (FILE * fp, FunctionDeclaration myself) {
	if (!myself.body) {
		return;
	}
	Bool first_formal_arg = true;
	FunctionType function_type = (FunctionType) myself.type;
	function_type.return_type.generate (fp);
	fprintf (fp, " ");
	myself.name.generate (fp);
	fprintf (fp, " (");
	myself.formal_arguments.map_args (functiondeclaration_generate_formal_arg, fp, &first_formal_arg);
	fprintf (fp, ")\n");
	fprintf (fp, "{\n");

	if (function_type.has_var_args) {
		fprintf (fp, "va_list ap;\n");
		fprintf (fp, "va_start (ap, ");
		ArgumentDeclaration arg_decl = (ArgumentDeclaration) myself.formal_arguments.get (myself.formal_arguments.length - 2);
		arg_decl.name.generate (fp);
		fprintf (fp, ");\n");
	}
	myself.body?.generate (fp);

	if (function_type.has_var_args &&
		function_type.return_type is_of PrimitiveType &&
		((PrimitiveType) function_type.return_type).token.type == _VOID) {
		fprintf (fp, "va_end (ap);\n");
	}

	fprintf (fp, "}\n\n");
}

void functiondeclaration_find_in_interface (Token interface_name, va_list *app) {
	FunctionDeclaration function_decl = (FunctionDeclaration) va_arg (*app, void *);
	if (global_scope.exists_in_this_scope (interface_name)) {
		Declaration _decl = global_scope.lookup_in_this_scope (interface_name);
		if (_decl is_of InterfaceDeclaration) {
			InterfaceDeclaration interface_decl = (InterfaceDeclaration) _decl;
			if (interface_decl.member_scope.exists (function_decl.name)) {
				if (function_decl.body) {
					InterfaceMethodDefinition imd = new InterfaceMethodDefinition (interface_decl.name, function_decl.name);
					imd.interface_decl = (InterfaceDeclaration) interface_decl.retain ();
					imd.method_decl = (FunctionDeclaration) interface_decl.member_scope.lookup (function_decl.name);
					imd.method_decl.retain ();
					function_decl.implemented_methods.append (imd);
				}
			}
			interface_decl.interfaces?.map_args (functiondeclaration_find_in_interface, function_decl);
		} else {
			error (function_decl.name, "%s is not an interface\n", _decl.name.name.data);
		}
	}
}

void functiondeclaration_find_in_interface_ (Token _interface_name, ...) {
	functiondeclaration_find_in_interface (_interface_name, &...);
}

void functiondeclaration_type_check_implemented_methods (InterfaceMethodDefinition imd, va_list *app) {
	FunctionDeclaration fun_decl = (FunctionDeclaration) va_arg (*app, void *);
	if (!imd.interface_decl) {
		Declaration _interface_decl = global_scope.lookup (imd.interface_name);
		if (!_interface_decl is_of InterfaceDeclaration) {
			error (imd.interface_name, "Not an interface: '%s'\n", imd.interface_name.name.data);
			return;
		}
		imd.interface_decl = (InterfaceDeclaration) _interface_decl.retain ();
	}
	if (!imd.method_decl) {
		if (!imd.method_name) {
			imd.method_name = (Token) fun_decl.name.retain ();
		}
		Declaration _method_decl = imd.interface_decl.member_scope.lookup (imd.method_name);
		if (!_method_decl is_of FunctionDeclaration) {
			error (imd.method_name, "Not a function: '%s'\n", imd.method_name.name.data);
			return;
		}
		imd.method_decl = (FunctionDeclaration) _method_decl.retain ();
	}
}