include co2/HashMap
include co2/RefObject
include co2/IScope
include co2/Error

class Scope : RefObject, IScope {
	ScopeType type;
	Token name;
	Scope parent;
	HashMap map;

	Scope (ScopeType type, Token name) {
		super ();
		self.type = type;
		self.name = (Token) name?.retain ();
		parent = current_scope;
		map = new HashMap (127);
		current_scope = self;
	}

	~Scope () {
		name?.release ();
	}

	IScope get_parent () {
		return parent;
	}

	IScope set_parent (IScope parent_scope) {
		return parent = parent_scope;
	}

	void _log (Token token, char *action) {
		/*
		if (type == global_scope_type) {
			fprintf (stderr, "GLOBAL_SCOPE: %s.%s\t%s: %s\n", type.name.data, name ? name.name.data : null, action, token.name.data);
		} else {
			fprintf (stderr, "local scope: %s.%s\t%s: %s\n", type.name.data, name ? name.name.data : null, action, token.name.data);
		}
		*/
	}

	Declaration declare (Declaration decl) {
		_log (decl.name, "declare");
		map.put (decl.name.name, decl);
		decl.set_scope (self);
	}

	void leave () {
		current_scope = parent;
	}

	Declaration lookup_in_this_scope (Token token) {
		_log (token, "lookup_in_this_scope");
		map.get (token.name);
	}

	Declaration lookup (Token token) {
		_log (token, "lookup");
		Declaration result = lookup_in_this_scope (token);
		if (!result) {
			if (!parent) {
				error_not_found (token);
			} else {
				result = parent.lookup (token);
			}
		}
		return result;
	}

	Declaration find_type_in_this_scope (Token token, Class type) {
		Declaration result = (Declaration) map.get (token.name);
		if (result != null && !(result is_of type)) {
			!result;
		}
		return result;
	}

	Declaration find_type (Token token, Class type) {
		Declaration result = find_type_in_this_scope (token, type);
		if (!result && parent != null) {
			result = parent.find_type (token, type);
		}
		return result;
	}
 
	Bool exists_in_this_scope (Token token) {
		return map.get (token.name) != null;
	}

	Bool exists (Token token) {
		Bool result = exists_in_this_scope (token);
		if (result == false && parent != null) {
			result = parent.exists (token);
		}
		return result;
	}

	void error_not_found (Token token) {
		error (token, "'%s' not declared.\n", token.name.data);
	}

	ScopeType get_type () {
		return type;
	}
}
