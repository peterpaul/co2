include co2/Type
include co2/ObjectTypeDeclaration
include co2/StructDeclaration

class ObjectType : Type {
	ObjectTypeDeclaration decl;
	Token token;

	ObjectType (Token token, ObjectTypeDeclaration decl) {
		super ();
		self.token = (Token) token.retain ();
		self.decl = (ObjectTypeDeclaration) decl?.retain ();
	}

	~ObjectType () {
		token.release ();
		decl?.release ();
	}

	void type_check () {
		if (!decl) {
			decl = (ObjectTypeDeclaration) global_scope.lookup (token);
		}
	}

	void generate (FILE *fp) {
		if (decl is_of StructDeclaration) {
			fprintf (fp, "struct ");
			token.generate (fp);
		} else if (decl is_of TypeDeclaration) {
			token.generate (fp);
		} else if (decl is_of InterfaceDeclaration) {
			fprintf (fp, "struct Object*");
		} else {
			fprintf (fp, "struct ");
			token.generate (fp);
			fprintf (fp, "*");
		}
	}

	Token get_token () {
		return token;
	}

	String to_string () {
		return new String ("%s", token.name.data);
	}

	Bool is_compatible (Type other) {
		if (super (other)) {
			if (other is_of ObjectType) {
				ObjectType o_other = (ObjectType) other;
				if (!decl) {
					type_check ();
				}
				if (!o_other.decl) {
					o_other.type_check ();
				}
				return decl.is_compatible (o_other.decl);
			} else {
				return true;
			}
		} else {
			if (other.is_void_ptr ()) {
				return true;
			}
		}
		return false;
	}

	void accept (CompileObjectVisitor visitor) {
		token.accept (visitor);
		visitor.visit (self);
	}
}
