include co2/String
include co2/List
include co2/Map
include co2/HashMap
include co2/Context
include co2/Declaration
include co2/CompileObjectVisitor
include co2/InterfaceDeclaration
include co2/ObjectType
include co2/ClassDeclaration
include co2/VariableDeclaration
include co2/FunctionDeclaration

["stdlib.h"] void qsort(void *base, int nmemb, int size,
                  int(*)(void *, void *) compare);

File try_search_path(String file_name);

File current_file;

class File : CompileObject {
	String name, absolute_path;
	RefList file_dependencies, declarations;

	File (String name, String absolute_path) {
		self.name = (String) name.retain ();
		self.absolute_path = (String) absolute_path.retain ();
		declarations = new RefList (8, Declaration.class);
		declarations.retain ();
		file_dependencies = new RefList (8, File.class);
		file_dependencies.retain ();
	}

	~File () {
		name.release ();
		absolute_path.release ();
		declarations.release ();
		file_dependencies.release ();
	}

	void accept_all_files (CompileObjectVisitor visitor) {
		void accept_all_files_callback (File file) {
			file.accept_all_files (visitor);
		}

		self.file_dependencies.map (accept_all_files_callback);
		self.accept (visitor);
	}

	void accept (CompileObjectVisitor visitor) {
		current_context?.add (self);
		self.declarations.map_args (compileobject_accept, visitor);
		visitor.visit (self);
		current_context?.remove_last ();
	}

	void sort() {
		qsort (self.declarations.data, self.declarations.length, sizeof (void *), declaration_compare_callback);
	}

	void type_check () {
		self.file_dependencies.map (file_type_check);
		self.declarations.map (file_type_check);
	}

	void optimize () {
		self.declarations.map (file_optimize);
	}

	void generate (FILE *fp) {
		int file_definition_filter (Declaration member) {
			return member.include_file != null;
		}

		int file_declaration_filter (Declaration member) {
			return !member.include_file;
		}

		List definitions = self.declarations.filter (file_definition_filter);
		List declarations =  self.declarations.filter (file_declaration_filter);

		void generate_callback (CompileObject object) {
			object.generate (fp);
		}

		definitions.map (generate_callback);
		declarations.map (generate_callback);

		delete definitions;
		delete declarations;
	}

	void generateDepend () {
		void generateDepend_callback (File object) {
			object.generateDepend ();
		}

		printf (" \\\n %s", self.absolute_path.data);
		self.file_dependencies.map (generateDepend_callback);
	}
}

Map file_hash_map = null;
Map get_hash_map() {
	if (!file_hash_map) {
		file_hash_map = new HashMap (127);
	}
	return file_hash_map;
}

void file_type_check (CompileObject object) {
	if (object is_of Declaration) {
		current_context = new Context();
		current_context.retain ();
		object.type_check ();
		current_context.release ();
		current_context = null;
	} else {
		object.type_check ();
	}
}

void file_optimize (CompileObject object) {
	
}

Bool token_equals (Token myself, Token other) {
	return strcmp (myself.name.data, other.name.data) == 0;
}

void interface_depends_on (Token myself, va_list *app) {
	InterfaceDeclaration decl2 = (InterfaceDeclaration) va_arg (*app, void *);
	Bool * depends = va_arg (*app, Bool *);
	if (token_equals (myself, decl2.name)) {
		*depends = true;
	} else {
		if (global_scope.exists (myself)) {
			Declaration super_decl = global_scope.lookup (myself);
			if (super_decl is_of InterfaceDeclaration 
			    && interfacedeclaration_1_depends_on_2 ((InterfaceDeclaration) super_decl, decl2)) {
				*depends = true;
			}
		}
	}
}

Bool interfacedeclaration_1_depends_on_2 (InterfaceDeclaration decl1, Declaration decl2) {
	Bool depends = false;
	decl1.interfaces?.map_args (interface_depends_on, decl2, &depends);
	return depends;
}

int interfacedeclaration_compare_interface (InterfaceDeclaration decl1, Declaration _decl2) {
	InterfaceDeclaration decl2 = (InterfaceDeclaration) _decl2;
	if (interfacedeclaration_1_depends_on_2 (decl1, decl2)) {
		return 1;
	}
	if (interfacedeclaration_1_depends_on_2 (decl2, decl1)) {
		return -1;
	}
	return 0;
}

int interfacedeclaration_compare_class (InterfaceDeclaration decl1, Declaration _decl2) {
	ClassDeclaration decl2 = (ClassDeclaration) _decl2;
	Bool depends = false;

	void token_equals_callback (Token myself) {
		if (token_equals (myself, decl1.name)) {
			depends = true;
		}
	}

	decl2.interfaces?.map (token_equals_callback);
	if (depends) {
		return -1;
	}
	return 0;
}

Bool classdeclaration_1_depends_on_2 (ClassDeclaration decl1, ClassDeclaration decl2) {
	if (decl1.superclass) {
		if (token_equals (decl1.superclass, decl2.name)) {
			return true;
		}
		if (global_scope.exists (decl1.superclass)) {
			Declaration super_decl = global_scope.lookup (decl1.superclass);
			if (super_decl is_of ClassDeclaration) {
				return classdeclaration_1_depends_on_2 ((ClassDeclaration) super_decl, decl2);
			}
		}
	}
	return false;
}

int classdeclaration_compare_class (ClassDeclaration decl1, Declaration _decl2) {
	ClassDeclaration decl2 = (ClassDeclaration) _decl2;
	int result = classdeclaration_1_depends_on_2 (decl1, decl2);
	if (result == false) {
		result = -classdeclaration_1_depends_on_2 (decl2, decl1);
	}
	return result;
}

int interfacedeclaration_compare (Declaration _decl1, Declaration _decl2) {
	InterfaceDeclaration decl1 = (InterfaceDeclaration) _decl1;
	if (_decl2 is_of InterfaceDeclaration) {
		return interfacedeclaration_compare_interface (decl1, _decl2);
	} else if (_decl2 is_of ClassDeclaration) {
		return interfacedeclaration_compare_class (decl1, _decl2);
	} else if (_decl2 is_of TypeDeclaration) {
		TypeDeclaration decl2 = (TypeDeclaration) _decl2;
		if (decl2.type is_of ObjectType) {
			ObjectType type = (ObjectType) decl2.type;
			if (!type.decl) {
				type.type_check ();
			}
			if (type.decl != null) {
				return interfacedeclaration_compare (decl1, type.decl);
			}
		}
	}
	return -1;
}

int classdeclaration_compare (Declaration _decl1, Declaration _decl2) {
	ClassDeclaration decl1 = (ClassDeclaration) _decl1;
	if (_decl2 is_of InterfaceDeclaration) {
		return -interfacedeclaration_compare (_decl2, decl1);
	} else if (_decl2 is_of ClassDeclaration) {
		return classdeclaration_compare_class (decl1, _decl2);
	} else if (_decl2 is_of TypeDeclaration) {
		TypeDeclaration decl2 = (TypeDeclaration) _decl2;
		if (decl2.type is_of ObjectType) {
			ObjectType type = (ObjectType) decl2.type;
			if (!type.decl) {
				type.type_check ();
			}
			if (type.decl != null) {
				classdeclaration_compare (decl1, type.decl);
			}
		}
	}
	return -1;
}

int simpledeclaration_compare (Declaration decl1, Declaration decl2) {
	if (strcmp (decl1.name.name.data, "main") == 0) {
		return 1;
	}
	if (decl2 is_of Declaration) {
		if (strcmp (decl2.name.name.data, "main") == 0) {
			return -1;
		} else {
			return strcmp (decl1.name.name.data, decl2.name.name.data);
		}
	}
	return -declaration_compare (decl2, decl1);
}

int declaration_compare (Declaration decl1, Declaration decl2) {
	if (decl1 is_of InterfaceDeclaration) {
		return interfacedeclaration_compare (decl1, decl2);
	} else if (decl1 is_of ClassDeclaration) {
		return classdeclaration_compare (decl1, decl2);
	} else if (decl1 is_of TypeDeclaration) {
		return typedeclaration_compare (decl1, decl2);
	} else if (decl1 is_of FunctionDeclaration) {
		return simpledeclaration_compare (decl1, decl2);
	} else if (decl1 is_of VariableDeclaration) {
		return simpledeclaration_compare (decl1, decl2);
	}
	return 0;
}

int typedeclaration_compare (Declaration _decl1, Declaration decl2) {
	TypeDeclaration decl1 = (TypeDeclaration) _decl1;
	if (decl1.type is_of ObjectType) {
		ObjectType type = (ObjectType) decl1.type;
		if (!type.decl) {
			type.type_check ();
		}
		if (type.decl != null) {
			declaration_compare (type.decl, decl2);
		}
	}
	return 0;
}

int declaration_compare_callback (void *_decl1, void *_decl2) {
	void *decl1 = *(void **)_decl1;
	void *decl2 = *(void **)_decl2;
	return declaration_compare (decl1, decl2);
}
