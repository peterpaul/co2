include co2/RefObject
include Token
include CompileObjectVisitor
include Grammar

class CompileObject : RefObject {
	CompileObject () {
		super ();
	}

	void type_check ();
	void optimize ();
	void generate (FILE *fp);
	Token get_token ();

	void accept (CompileObjectVisitor visitor) {
		visitor.visit (self);
	}
}

typedef Bool = int;

int type_filter (RefObject member, va_list *app) {
	Class klass = (Class) va_arg (*app, void *);
	return member is_of klass;
}

int not_type_filter (RefObject member, va_list *app) {
	return !type_filter (member, app);
}

void compileobject_type_check (CompileObject object) {
	object.type_check ();
}

void compileobject_generate (CompileObject object, va_list *app) {
	FILE *fp = va_arg (*app, FILE *);
	object.generate (fp);
}

void compileobject_accept (CompileObject object, va_list *app) {
	CompileObjectVisitor visitor = (CompileObjectVisitor) va_arg (*app, void *);
	object.accept (visitor);
}
