include Declaration
include Expression
include Type
include Context

class VariableDeclaration : Declaration {
	Expression expr;

	VariableDeclaration (Token a_name, Expression an_expr) {
		super (a_name);
		expr = (Expression) an_expr?.retain ();
	}

	~VariableDeclaration () {
		expr?.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		current_context?.add (self);
		type.accept (visitor);
		expr?.accept (visitor);
		visitor.visit (self);
		current_context?.remove_last ();
	}

	void set_type (Type type) {
		self.type = (Type) type.retain ();
	}

	void generate (FILE *fp) {
		if (type is_of FunctionType) {
			FunctionType function_type = (FunctionType) type;
			function_type.generate_named (fp, name);
		} else {
			type.generate (fp);
			fprintf (fp, " ");
			name.generate (fp);
		}
		if (expr) {
			fprintf (fp, " = ");
			expr.generate (fp);
		}
		fprintf (fp, ";\n");
	}

	void type_check () {
		current_context?.add (self);
		type.type_check ();
		if (expr) {
			expr.type_check ();
			if (!expr.type) {
				return;
			}
			type.assert_compatible (expr.type);
		}
		IScope parent = scope.get_parent ();
		if (parent?.exists (name)) {
			Declaration first_decl = parent.lookup (name);
			if (scope.get_type () == class_scope_type
				&& first_decl.scope.get_type () == class_scope_type) {
				error (name, "'%s' already declaraed at %s:%d\n", name.name.data, first_decl.name.file.name.data, first_decl.name.line);
			}
		}
		current_context?.remove_last ();
	}
}
