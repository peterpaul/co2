include co2/Expression
include co2/Token
include co2/ClassDeclaration
include co2/RefList

class SuperExpression : Expression {
	Token super_name;
	Token ctor_name;
	ClassDeclaration class_context;
	Declaration method_context;
	RefList actual_arguments;

	SuperExpression (Token super_name, Token ctor_name, RefList actual_arguments) {
		super ();
		self.super_name = (Token) super_name?.retain ();
		self.ctor_name = (Token) ctor_name?.retain ();
		self.actual_arguments = (RefList) actual_arguments?.retain ();
	}

	~SuperExpression () {
		super_name.release ();
		ctor_name.release ();
		actual_arguments.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		super_name?.accept (visitor);
		ctor_name?.accept (visitor);
		actual_arguments?.map_args (compileobject_accept, visitor);
		visitor.visit (self);
	}

	void type_check () {
		// get class context
		class_context = (ClassDeclaration) current_context?.find (ClassDeclaration.class);
		// get method context
		method_context = (Declaration) current_context?.find (ConstructorDeclaration.class);
		if (!method_context) {
			method_context = (Declaration) current_context?.find (FunctionDeclaration.class);
		}

		if (!class_context.superclass) {
			error (super_name, "%s has no superclass.\n", class_context.name.name.data);
			return;
		}

		ClassDeclaration super_decl = (ClassDeclaration) global_scope.lookup (class_context.superclass);

		if (method_context is_of ConstructorDeclaration) {
			Token _ctor_name = ctor_name;
			if (!_ctor_name) {
				_ctor_name = new Token.fromToken (super_name, "ctor", _IDENTIFIER);
			}
			_ctor_name.retain ();
			ConstructorDeclaration ctor_decl = (ConstructorDeclaration) super_decl.member_scope.lookup (_ctor_name);

			if (actual_arguments.length < ctor_decl.formal_arguments.length) {
				error (super_name, "'%s' needs %d arguments, but got %d.\n", ctor_decl.name.name.data, ctor_decl.formal_arguments.length, actual_arguments.length);
				return;
			}
			int i;
			for (i = 0; i < ctor_decl.formal_arguments.length; i += 1) {
				ArgumentDeclaration arg_decl = (ArgumentDeclaration) ctor_decl.formal_arguments.get (i);
				Expression arg_expr = (Expression) actual_arguments.get (i);
				arg_expr.type_check ();
				arg_decl.type.assert_compatible (arg_expr.type);
			}
			_ctor_name.release ();
		} else if (method_context is_of FunctionDeclaration) {
			FunctionDeclaration function_decl = (FunctionDeclaration) super_decl.member_scope.lookup (method_context.name);

			if (actual_arguments.length < function_decl.formal_arguments.length) {
				error (super_name, "'%s' needs %d arguments, but got %d.\n", function_decl.name.name.data, function_decl.formal_arguments.length, actual_arguments.length);
				return;
			}
			int i;
			for (i = 0; i < function_decl.formal_arguments.length; i += 1) {
				ArgumentDeclaration arg_decl = (ArgumentDeclaration) function_decl.formal_arguments.get (i);
				Expression arg_expr = (Expression) actual_arguments.get (i);
				arg_expr.type_check ();
				arg_decl.type.assert_compatible (arg_expr.type);
			}
			FunctionType function_type = (FunctionType) function_decl.type;
			type = (Type) function_type.return_type.retain ();
		} else {
			error (super_name, "No context found for super keyword.\n");
		}
	}

	void generate (FILE *fp) {
		ClassDeclaration class_decl = (ClassDeclaration) current_context.find (ClassDeclaration.class);
		if (method_context is_of ConstructorDeclaration) {
			if (!ctor_name) {
				Bool is_first_arg = false;
				fprintf (fp, "self = o_super_ctor (self, ");
				class_decl.superclass.generate (fp);
				fprintf (fp, " ()");
				actual_arguments.map_args (expression_generate_actual_argument, fp, &is_first_arg);
				fprintf (fp, ")");
			} else {
				Bool is_first_arg = false;
				fprintf (fp, "self = o_super_ctor_named (self, _");
				class_context.superclass.generate (fp);
				fprintf (fp, "_ctor_");
				ctor_name.generate (fp);
				actual_arguments.map_args (expression_generate_actual_argument, fp, &is_first_arg);
				fprintf (fp, ")");
			}
		} else {
			Bool is_first_arg = false;
			class_decl.superclass.generate (fp);
			fprintf (fp, " ()->");
			method_context.name.generate (fp);
			fprintf (fp, " (self");
			actual_arguments.map_args (expression_generate_actual_argument, fp, &is_first_arg);
			fprintf (fp, ")");
		}
	}
}