/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Statement
include co2/FunctionDeclaration
include co2/TryStatement
include co2/CatchStatement
include co2/FinallyStatement
include co2/Expression

class ReturnStatement : Statement {
	Expression expr;
	FunctionDeclaration function_context;
	TryStatement try_context;
	CatchStatement catch_context;
	FinallyStatement finally_context;

	ReturnStatement (Expression anExpression) {
		super ();
		expr = (Expression) anExpression?.retain ();
	}

	~ReturnStatement () {
		expr?.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		current_context?.add (self);
		expr?.accept (visitor);
		visitor.visit (self);
		current_context?.remove_last ();
	}

	void generate (FILE *fp) {
		FunctionType function_type = (FunctionType) function_context.type;
		if (!try_context && !function_type.has_var_args) {
			fprintf (fp, "return ");
			expr?.generate (fp);
			fprintf (fp, ";\n");
			return;
		}

		fprintf (fp, "{\n");
		if (expr) {
			expr.type.generate (fp);
			fprintf (fp, " __return_value = ");
			expr.generate (fp);
			fprintf (fp, ";\n");
		}

		if (try_context) {
			fprintf (fp, "ex_pop ();\n");
			if (try_context.finally_clause && !finally_context) {
				fprintf (fp, "do_finally;\n");
			}
		}

		if (function_type.has_var_args) {
			fprintf (fp, "va_end (ap);\n");
		}

		fprintf (fp, "return ");
		if (expr) {
			fprintf (fp, "__return_value");
		}

		fprintf (fp, ";\n");
		fprintf (fp, "}\n");
	}

	void type_check () {
		expr?.type_check ();
		function_context = (FunctionDeclaration) current_context?.find (FunctionDeclaration.class);
		FunctionType function_type = (FunctionType) function_context.type;
		if (expr && expr.type) {
			function_type.return_type.assert_compatible (expr.type);
		}

		try_context = (TryStatement) current_context?.find (TryStatement.class);
		catch_context = (CatchStatement) current_context?.find (CatchStatement.class);
		finally_context = (FinallyStatement) current_context?.find (FinallyStatement.class);
	}
}
