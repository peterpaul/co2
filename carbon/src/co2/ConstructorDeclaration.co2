/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Declaration
include co2/Token
include co2/Statement
include co2/RefList

class ConstructorDeclaration : Declaration {
	Token class_name;
	RefList formal_arguments;
	Statement body;

	ConstructorDeclaration (Token name, Token class_name, RefList formal_arguments, Statement body) {
		super (name);
		self.class_name = (Token) class_name.retain ();
		self.formal_arguments = (RefList) formal_arguments.retain ();
		self.body = (Statement) body?.retain ();

		Declaration class_decl = global_scope.lookup (class_name);
		if (class_decl) {
			type = new ObjectType (class_name, (ObjectTypeDeclaration) class_decl);
			type.retain ();
		}
	}

	~ConstructorDeclaration () {
		class_name.release ();
		formal_arguments.release ();
		body?.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		current_context?.add (self);
		formal_arguments.map_args (compileobject_accept, visitor);
		body?.accept (visitor);
		visitor.visit (self);
		current_context?.remove_last ();
	}

	void type_check () {
		type.type_check ();
		current_context?.add (self);
		Declaration class_decl = (Declaration) current_context?.find (ClassDeclaration.class);

		if (!class_decl) {
			error (class_name, "Constructors ('%s') are only allowed in class declarations\n", class_name.name.data);
		} else if (strcmp (class_decl.name.name.data, class_name.name.data) != 0) {
			error (class_name, "Constructor should be called '%s' instead of '%s'\n", class_decl.name.name.data, class_name.name.data);
		}

		body.type_check ();
		current_context?.remove_last ();
	}
	
	Bool has_var_args () {
		if (formal_arguments.length > 0) {
			ArgumentDeclaration last_arg = (ArgumentDeclaration) formal_arguments.get (formal_arguments.length - 1);
			if (last_arg.name.type == _VA_ARG) {
				return true;
			}
		}
		return false;
	}
}
