/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Expression
include co2/Type
include co2/TokenExpression
include co2/RefList

class NewExpression : Expression {
	Type new_type;
	TokenExpression ctor_name;
	Expression array_size;
	RefList ctor_arguments;

	NewExpression (Type new_type, RefObject arg) {
		super ();
		self.new_type = (Type) new_type.retain ();
		if (arg is_of Expression) {
			array_size = (Expression) arg;
		} else if (arg is_of RefList) {
			ctor_arguments = (RefList) arg;
		} else {
			error (null, "expected expression or list");
		}
	}

	~NewExpression () {
		new_type.release ();
		ctor_name?.release ();
		ctor_arguments?.release ();
		array_size?.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		new_type?.accept (visitor);
		ctor_name?.accept (visitor);
		ctor_arguments?.map_args (compileobject_accept, visitor);
		array_size?.accept (visitor);
		visitor.visit (self);
	}

	void generate (FILE *fp) {
		if (ctor_arguments != null) {
			Bool is_first_arg = false;
			fprintf (fp, "O_CALL_CLASS (");
			Token token = new_type.get_token ();
			token.generate (fp);
			if (ctor_name != null) {
				fprintf (fp, " (), new_ctor, _");
				// TODO: lookup ctor_name, and use correct classname
				token.generate (fp);
				fprintf (fp, "_ctor_");
				ctor_name.token.generate (fp);
				ctor_arguments.map_args (expression_generate_actual_argument, fp, &is_first_arg);
				fprintf (fp, ")");
			} else {
				fprintf (fp, " (), new");
				ctor_arguments.map_args (expression_generate_actual_argument, fp, &is_first_arg);
				fprintf (fp, ")");
			}
		} else if (array_size != null) {
			fprintf (fp, "calloc (");
			array_size.generate (fp);
			fprintf (fp, ", sizeof (");
			new_type.generate (fp);
			fprintf (fp, "))");
		} else {
			// TODO error message or throw exception
		}
	}

	void type_check () {
		new_type.type_check ();
		if (ctor_arguments != null) {
			ObjectType object_type = (ObjectType) new_type;
			ClassDeclaration class_decl = (ClassDeclaration) object_type.decl;
			if (ctor_name != null) {
				ctor_name.set_scope (class_decl.member_scope);
				ctor_name.type_check ();
				newexpression_type_check_arguments (ctor_name, ctor_arguments);
			} else {
				Token ctor_token = new Token.fromToken (object_type.token, "ctor", _IDENTIFIER);
				TokenExpression token_expr = new TokenExpression (ctor_token);

				token_expr.set_scope (class_decl.member_scope);
				// check whether the token "ctor" is defined
				if (token_expr.scope.exists (token_expr.token)
					|| global_scope.exists (token_expr.token)) {
					token_expr.type_check ();
					newexpression_type_check_arguments (token_expr, ctor_arguments);
				} else {
					// accept empty constructor
					ctor_arguments.map (compileobject_type_check);
				}
			}
			type = (Type) new_type.retain ();
		} else if (array_size != null) {
			array_size.type_check ();
			type = new ArrayType (new_type);
		} else {
			// TODO error message
		}
	}

	void set_ctor_name (TokenExpression ctor_name) {
		self.ctor_name = (TokenExpression) ctor_name.retain ();
	}
}

void newexpression_type_check_arguments (TokenExpression ctor_token, RefList actual_arguments) {
	if (!ctor_token.decl is_of ConstructorDeclaration) {
		error (ctor_token.token, "'%s' is not a constructor.", ctor_token.token.name.data);
		return;
	}
	ConstructorDeclaration ctor_decl = (ConstructorDeclaration) ctor_token.decl;
	int expected_length = ctor_decl.formal_arguments.length;
	// if last parameter is vararg, expected_length -1
	if (ctor_decl.has_var_args ()) {
		expected_length -= 1;
		if (actual_arguments.length < expected_length) {
			error (ctor_token.token, "'%s' needs %d arguments, but got %d.", ctor_token.token.name.data, expected_length, actual_arguments.length);
			return;
		}
	} else {
		if (actual_arguments.length != expected_length) {
			error (ctor_token.token, "'%s' needs %d arguments, but got %d.", ctor_token.token.name.data, expected_length, actual_arguments.length);
			return;
		}
	}

	int i;
	for (i = 0; i < expected_length; i += 1) {
		ArgumentDeclaration arg_decl = (ArgumentDeclaration) ctor_decl.formal_arguments.get (i);
		Expression arg_expr = (Expression) actual_arguments.get (i);
		arg_expr.type_check ();
		arg_decl.type.type_check ();
		arg_decl.type.assert_compatible (arg_expr.type);
	}
	for (i = expected_length; i < actual_arguments.length; i += 1) {
		Expression arg_expr = (Expression) actual_arguments.get (i);
		arg_expr.type_check ();
	}
}
