/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Expression
include co2/Token
include co2/IScope

class TokenExpression : Expression {
	Token token;
	IScope scope;
	Declaration decl;
	Bool check_global_scope;

	TokenExpression (Token token) {
		super ();
		self.token = (Token) token.retain ();
		if (token.type == _IDENTIFIER || token.type == _TYPE_IDENTIFIER || token.type == _CLASS) {
			scope = current_scope;
		}
		check_global_scope = true;

		// TODO this is not a final solution, as it might not resolve the right var
		if (current_scope?.exists (token)) {
			decl = current_scope.lookup (token);
			decl.retain ();
		}
	}

	~TokenExpression () {
		token.release ();
		decl?.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		token.accept (visitor);
		visitor.visit (self);
	}

	void generate_left (FILE * fp, Bool left) {
		if (token.type == _VA_ARG) {
			fprintf (fp, "ap");
			return;
		}
		if (left && decl?.class_decl != null) {
			fprintf (fp, "self->");
		}
		token.generate (fp);
		if (token.type == _TYPE_IDENTIFIER) {
			fprintf (fp, " ()");
		}
	}

	void set_scope (IScope scope) {
		self.scope = scope;
		check_global_scope = false;
	}

	void type_check () {
		if (!decl && (token.type == _IDENTIFIER || token.type == _TYPE_IDENTIFIER || token.type == _CLASS)) {
			if (scope?.exists (token)) {
				decl = scope.lookup (token);
			}
			if (!decl && global_scope.exists (token)) {
				decl = global_scope.lookup (token);
			}
			decl?.retain ();
		}
		switch (token.type) {
		case _TYPE_IDENTIFIER: {
			if (!decl || !check_global_scope) {
				lookup ();
			}
			if (!decl) {
				return;
			}
			Token token = new Token.fromToken (self.token, "void", _VOID);
			type = new PrimitiveType (token);
			type = new ArrayType (type);
			type.retain ();
			break;
		}
		case _CLASS:
		case _IDENTIFIER:
			if (!decl || !check_global_scope) {
				lookup ();
			}
			if (!decl) {
				return;
			}
			type = decl.type.get_declared_type ();
			type.retain ();
			break;
		case _SELF: {
			ObjectTypeDeclaration object_type_decl = (ObjectTypeDeclaration) current_context.find (ObjectTypeDeclaration.class);
			if (!object_type_decl) {
				error (token, "Cannot use 'self' outside of class or interface context.");
				return;
			}
			type = new ObjectType (object_type_decl.name, object_type_decl);
			type.retain ();
			break;
		}
		case _INT_CONSTANT: {
			Token token = new Token.fromToken (self.token, "int", _INT);
			type = new PrimitiveType (token);
			type.retain ();
			break;
		}
		case _STRING_CONSTANT: {
			Token token = new Token.fromToken (self.token, "char", _CHAR);
			type = new PrimitiveType (token);
			type = new ArrayType (type);
			type.retain ();
			break;
		}
		case _CHAR_CONSTANT: {
			Token token = new Token.fromToken (self.token, "char", _CHAR);
			type = new PrimitiveType (token);
			type.retain ();
			break;
		}
		case _FLOAT_CONSTANT: {
			Token token = new Token.fromToken (self.token, "float", _FLOAT);
			type = new PrimitiveType (token);
			type.retain ();
			break;
		}
		case _VA_ARG: {
			Token token = new Token.fromToken (self.token, "va_list", _VA_LIST__);
			type = new PrimitiveType (token);
			type.retain ();
			break;
		}
		default:
			error (token, "Unhandled TokenExpression: '%s'\n", token.name.data);
			break;
		}
		type.type_check ();
	}

	void lookup () {
		decl?.release ();
		if (check_global_scope) {
			if (scope.exists (token)) {
				decl = scope.lookup (token);
			} else {
				decl = global_scope.lookup (token);
			}
		} else {
			decl = scope.lookup (token);
		}
		decl?.retain ();
	}

	Token get_token () {
		return token;
	}
}
