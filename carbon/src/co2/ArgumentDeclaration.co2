/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/CompileObjectVisitor
include co2/Context
include co2/Declaration
include co2/FunctionType

class ArgumentDeclaration : Declaration {
	ArgumentDeclaration (Token name, Type type) {
		super (name);
		self.type = (Type) type.retain ();
	}

	void accept (CompileObjectVisitor visitor) {
		current_context?.add (self);
		type.accept (visitor);
		visitor.visit (self);
		current_context?.remove_last ();
	}

	void generate (FILE *fp) {
		if (name.type == _VA_ARG) {
			name.generate (fp);
		} else if (type is_of FunctionType) {
			((FunctionType) type).generate_named (fp, name);
		} else {
			type.generate (fp);
			fprintf (fp, " ");
			name.generate (fp);
		}
	}

	void type_check () {
		current_context?.add (self);
		type.type_check ();
		current_context.remove_last ();
	}
}
