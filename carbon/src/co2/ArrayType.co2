/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Type

class ArrayType : Type {
	Type base_type;

	ArrayType (Type type) {
		super ();
		base_type = (Type) type.retain ();
	}

	~ArrayType () {
		base_type.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		base_type.accept (visitor);
		visitor.visit (self);
	}

	void type_check () {
		base_type.type_check ();
	}

	void generate (FILE *fp) {
		base_type.generate (fp);
		fprintf (fp, "*");
	}

	String toString () {
		String string = base_type.toString ();
		string.append_str ("*");
		return string;
	}

	Token get_token () {
		base_type.get_token ();
	}

	Bool is_compatible (Type _other) {
		if (super (_other)) {
			ArrayType other = (ArrayType) _other;
			if (self.is_void_ptr () || other.is_void_ptr ()) {
				return true;
			}
			return base_type.is_compatible (other.base_type);
		}
		return false;
	}
}
