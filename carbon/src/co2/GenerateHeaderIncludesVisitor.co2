/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/BaseCompileObjectVisitor
include co2/Context
include co2/HashSet
include co2/CompilerResources

class GenerateHeaderIncludesVisitor : BaseCompileObjectVisitor {
	Set set;

	GenerateHeaderIncludesVisitor (FILE *fp) {
		super (fp);
		current_context = new Context ();
		current_context.retain ();
		set = new HashSet (127);
	}

	~GenerateHeaderIncludesVisitor () {
		current_context.release ();
		current_context = null;
		delete set;
	}

	void addFile (File file) {
		if (file && file != main_file) {
			String filename = new String ("\"%s.h\"", file.name.data);
			set.add (filename);
		}
	}

	void visitClassDeclaration (ClassDeclaration decl) {
		if (decl.superclass) {
			Declaration super_decl = global_scope.lookup (decl.superclass);
			if (super_decl) {
				addFile (super_decl.file);
			}
		}
		decl.interfaces.map_args (handle_interface, self);
	}

	void visitDeclaration (Declaration decl) {
		if (decl.include_file) {
			String filename = new String ("\"%s.h\"", decl.include_file.name.data);
			set.add (decl.include_file.name);
			return;
		}
		if (decl.scope?.get_type () != global_scope_type) {
			// only generate global declarations
			return;
		}
		super (decl);
	}

	void visitInterfaceDeclaration (InterfaceDeclaration decl) {
		decl.interfaces?.map_args (handle_interface, self);
	}

	void visitFile (File file) {
		Iterator it = set.iterator ();
		while (it.hasNext ()) {
			String value = (String) it.getNext ();
			fprintf (fp, "#include %s\n", value.data);
		}
	}
}

void handle_interface (Token token, va_list *app) {
	Declaration decl = (Declaration) global_scope.lookup (token);
	GenerateHeaderIncludesVisitor visitor = (GenerateHeaderIncludesVisitor) va_arg (*app, void *);
	visitor.addFile (decl.file);
}
