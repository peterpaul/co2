/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Declaration
include co2/Expression
include co2/Type
include co2/Context

class VariableDeclaration : Declaration {
	Expression expr;

	VariableDeclaration (Token name, Expression expr) {
		super (name);
		self.expr = (Expression) expr?.retain ();
	}

	~VariableDeclaration () {
		expr?.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		current_context?.add (self);
		type.accept (visitor);
		expr?.accept (visitor);
		visitor.visit (self);
		current_context?.remove_last ();
	}

	void set_type (Type type) {
		self.type = (Type) type.retain ();
	}

	void generate (FILE *fp) {
		if (type is_of FunctionType) {
			FunctionType function_type = (FunctionType) type;
			function_type.generate_named (fp, name);
		} else {
			type.generate (fp);
			fprintf (fp, " ");
			name.generate (fp);
		}
		if (expr) {
			fprintf (fp, " = ");
			expr.generate (fp);
		}
		fprintf (fp, ";\n");
	}

	void type_check () {
		current_context?.add (self);
		type.type_check ();
		if (expr) {
			expr.type_check ();
			if (!expr.type) {
				return;
			}
			type.assert_compatible (expr.type);
		}
		IScope parent = scope.get_parent ();
		if (parent?.exists (name)) {
			Declaration first_decl = parent.lookup (name);
			if (scope.get_type () == class_scope_type
				&& first_decl.scope.get_type () == class_scope_type) {
				error (name, "'%s' already declared at %s:%d\n", name.name.data, first_decl.name.file.name.data, first_decl.name.line);
			}
		}
		current_context?.remove_last ();
	}
}
