/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Type
include co2/Declaration
include co2/File
include co2/RefObject
include co2/List
include co2/ArrayList
include co2/CompileObject

Context current_context;

class Context : RefObject {
	List stack;

	Context () {
		stack = new ArrayList ();
		((ArrayList) stack).retain ();
	}

	~Context () {
		((RefObject) stack).release ();
	}

	void add (CompileObject item) {
		stack.add (item);
	}

	CompileObject find (Class klass) {
		return find_nth_instance (klass, 1);
	}

	CompileObject find_nth_instance (Class klass, unsigned n) {
		int i;
		unsigned found_count = 0;
		for (i = stack.size () - 1; i >= 0; i -= 1) {
			CompileObject item = (CompileObject) stack.get (i);
			if (item is_of klass) {
				found_count += 1;
				if (found_count == n) {
					return item;
				}
			}
		}
		return null;
	}

	void remove_last () {
		stack.removeLast ();
	}
}
