/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/CompileObject
include co2/TypeDeclaration
include co2/ObjectType
include co2/ArrayType
include co2/PrimitiveType

class Type : CompileObject {
	Type () {
		super ();
	}

	~Type () {
	}

	Type get_declared_type () {
		if (self is_of ObjectType) {
			ObjectType o_type = (ObjectType) self;
			if (o_type.decl != null && o_type.decl is_of TypeDeclaration) {
				TypeDeclaration o_type_decl = (TypeDeclaration) o_type.decl;
				return o_type_decl.type;
			}
		}
		return self;
	}

	Bool is_compatible (Type other) {
		if (other != null) {
			other = other.get_declared_type ();
			return other is_of get_declared_type ().class;
		} else {
			return false;
		}
	}

	void assert_compatible (Type other) {
		if (!is_compatible (other)) {
			if (other != null) {
				Token token = get_token ();
				String self_string = toString ();
				String other_string = other.toString ();
				error (token, "incompatible types: %s and %s\n", self_string.data, other_string.data);
				delete self_string;
				delete other_string;
			} else {
				Token token = get_token ();
				String self_string = toString ();
				error (token, "incompatible types: %s and %s\n", self_string.data, null);
				delete self_string;
			}
		}
	}

	void assume_compatible (Type other) {
		if (!is_compatible (other)) {
			if (other != null) {
				Token token = get_token ();
				String self_string = toString ();
				String other_string = other.toString ();
				warning (token, "incompatible types: %s and %s\n", self_string.data, other_string.data);
				delete self_string;
				delete other_string;
			} else {
				Token token = get_token ();
				String self_string = toString ();
				warning (token, "incompatible types: %s and %s\n", self_string.data, null);
				delete self_string;
			}
		}
	}

	void type_check () {
		// intentionally empty
	}

	Bool is_void_ptr () {
		if (self is_of ArrayType) {
			ArrayType array_type = (ArrayType) self;
			if (array_type.base_type is_of PrimitiveType) {
				PrimitiveType primitive_type = (PrimitiveType) array_type.base_type;
				if (primitive_type.token.type == _VOID) {
					return true;
				}
			}
		}
		return false;
	}
}
