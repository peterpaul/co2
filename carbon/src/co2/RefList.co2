/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/ArrayList
include co2/ClassCastException

class RefList : ArrayList {

	Class type;

	RefList (unsigned max, Class type) {
		super.withSize (max);
		self.type = type;
	}

	RefObject append (RefObject item) {
		return add (item);
	}

	RefObject map_args (void (*)(RefObject, va_list *) fun, ...) {
		int i;
		unsigned length = self.length;
		for (i = 0; i < length; i += 1) {
			va_list aq;
			va_copy (aq, ...);
			fun (get (i), &aq);
			va_end (aq);
		}
		return self;
	}

	RefList filter_args (int (*)(RefObject, va_list *) fun, ...) {
		int i;
		unsigned length = size ();
		RefList result = new RefList (length, type);
		for (i = 0; i < length; i += 1) {
			RefObject item = get (i);
			va_list aq;
			va_copy (aq, ...);
			if (fun (item, &aq)) {
				result.add (item);
			}
			va_end (aq);
		}
		return result;
	}

	RefList filter (int (*)(RefObject) fun) {
		int i;
		unsigned length = size ();
		RefList result = new RefList (length, type);
		for (i = 0; i < length; i += 1) {
			RefObject item = get (i);
			if (fun (item)) {
				result.add (item);
			}
		}
		return result;
	}

	RefObject set (unsigned index, RefObject item) {
		if (!item is_of type) {
			throw new ClassCastException ();
		}
		return super (index, item);
	}

	RefObject add (RefObject item) {
		if (!item is_of type) {
			throw new ClassCastException ();
		}
		return super (item);
	}
}
