/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/RefObject
include co2/Token
include co2/CompileObjectVisitor
include co2/Grammar

class CompileObject : RefObject {
	CompileObject () {
		super ();
	}

	void type_check ();
	void optimize ();
	void generate (FILE *fp);
	Token get_token ();

	void accept (CompileObjectVisitor visitor) {
		visitor.visit (self);
	}
}

typedef Bool = int;

int type_filter (RefObject member, va_list *app) {
	Class klass = (Class) va_arg (*app, void *);
	return member is_of klass;
}

int not_type_filter (RefObject member, va_list *app) {
	return !type_filter (member, app);
}

void compileobject_type_check (CompileObject object) {
	object.type_check ();
}

void compileobject_generate (CompileObject object, va_list *app) {
	FILE *fp = va_arg (*app, FILE *);
	object.generate (fp);
}

void compileobject_accept (CompileObject object, va_list *app) {
	CompileObjectVisitor visitor = (CompileObjectVisitor) va_arg (*app, void *);
	object.accept (visitor);
}
