/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Expression

class ConditionalExpression : Expression {
	Expression condition;
	Expression then_expr;
	Expression else_expr;

	ConditionalExpression (Expression condition, Expression then_expr, Expression else_expr) {
		super ();
		self.condition = (Expression) condition.retain ();
		self.then_expr = (Expression) then_expr.retain ();
		self.else_expr = (Expression) else_expr.retain ();
	}

	~ConditionalExpression () {
		condition.release ();
		then_expr.release ();
		else_expr.release ();
	}

	void accept (CompileObjectVisitor visitor) {
		current_context?.add (self);
		condition.accept (visitor);
		then_expr.accept (visitor);
		else_expr.accept (visitor);
		visitor.visit (self);
		current_context?.remove_last ();
	}

	void type_check () {
		condition.type_check ();
		then_expr.type_check ();
		else_expr.type_check ();
		Bool then_compat_else = then_expr.type.is_compatible (else_expr.type);
		Bool else_compat_then = else_expr.type.is_compatible (then_expr.type);
		if (then_compat_else) {
			type = (Type) then_expr.type.retain ();
		} else if (else_compat_then) {
			type = (Type) else_expr.type.retain ();
		} else {
			if (then_expr.type is_of ObjectType
				&& else_expr.type is_of ObjectType) {
				ObjectType then_type = (ObjectType) then_expr.type;
				ObjectType else_type = (ObjectType) else_expr.type;
				if (then_type.decl is_of ClassDeclaration
					&& else_type.decl is_of ClassDeclaration) {
					ClassDeclaration then_decl = (ClassDeclaration) then_type.decl;
					ClassDeclaration else_decl = (ClassDeclaration) else_type.decl;
					ClassDeclaration result = (ClassDeclaration) then_decl.find_common_base (else_decl);
					if (result) {
						type = new ObjectType (result.name, result);
						type.retain ();
						return;
					}
				}
			}
			// check whether objecttype, and if so find common base
			then_expr.type.assert_compatible (else_expr.type);
			else_expr.type.assert_compatible (then_expr.type);
		}
	}

	void generate (FILE *fp) {
		// fprintf (fp, "(");
		condition.generate (fp);
		fprintf (fp, "?"); // TODO add spaces
		then_expr.generate (fp);
		fprintf (fp, ":"); // TODO add spaces
		else_expr.generate (fp);
		// fprintf (fp, ")");
	}
}
