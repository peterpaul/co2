/*
 * carbon Compiler and programming language for libco2
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Enum
include co2/Token
include co2/Declaration

int scope_initialized = false;

class ScopeType : Enum {
	ScopeType () {
		super ();
		if (!scope_initialized) {
			scope_initialized = true;
			global_scope_type = createPrivateScopeType (1, "global_scope_type");
			variable_scope_type = createPrivateScopeType (2, "variable_scope_type");
			class_scope_type = createPrivateScopeType (3, "class_scope_type");
			argument_scope_type = createPrivateScopeType (4, "argument_scope_type");
			compound_scope_type = createPrivateScopeType (5, "compound_scope_type");
			interface_scope_type = createPrivateScopeType (6, "interface_scope_type");
			struct_scope_type = createPrivateScopeType (7, "struct_scope_type");
			catch_scope_type = createPrivateScopeType (7, "catch_scope_type");
		}
		name = null;
		value = 0;
	}

	ScopeType.private (int v, char * n) {
		super.private (v, n);
	}
}

ScopeType createPrivateScopeType (int v, char * n)
{
	ScopeType l = new ScopeType.private (v, n);
	l.retain ();
	return l;
}

ScopeType global_scope_type, variable_scope_type, class_scope_type, argument_scope_type, compound_scope_type, interface_scope_type, struct_scope_type, catch_scope_type;

IScope current_scope = null;
IScope global_scope = null;

interface IScope {
	IScope get_parent ();
	IScope set_parent (IScope parent_scope);
	Declaration declare (Declaration decl);
	void leave ();
	Declaration lookup_in_this_scope (Token token);
	Declaration lookup (Token token);
	Declaration find_type_in_this_scope (Token token, Class type);
	Declaration find_type (Token token, Class type);
	Bool exists_in_this_scope (Token token);
	Bool exists (Token token);
	ScopeType get_type ();
}
