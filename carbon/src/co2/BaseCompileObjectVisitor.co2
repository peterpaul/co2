include co2/RefObject
include co2/CompileObjectVisitor
include co2/DestructorDeclaration
include co2/BreakStatement
include co2/CaseStatement
include co2/CatchStatement
include co2/CompoundStatement
include co2/DeleteStatement
include co2/DoStatement
include co2/ExpressionStatement
include co2/FinallyStatement
include co2/ForStatement
include co2/IfStatement
include co2/ReturnStatement
include co2/SwitchStatement
include co2/ThrowStatement
include co2/TryStatement
include co2/WhileStatement
include co2/BinaryExpression
include co2/CastExpression
include co2/ConditionalExpression
include co2/IsOfExpression
include co2/NestedExpression
include co2/NewExpression
include co2/NullExpression
include co2/SizeExpression
include co2/SuperExpression
include co2/TokenExpression
include co2/UnaryExpression
include co2/VarArgExpression
include co2/ArrayType

class BaseCompileObjectVisitor : RefObject, CompileObjectVisitor {
	FILE *fp;

	BaseCompileObjectVisitor (FILE *fp) {
		super ();
		self.fp = fp;
	}

	void visit (CompileObject object) {
		if (object is_of Declaration) {
			visitDeclaration ((Declaration) object);
		} else if (object is_of Statement) {
			visitStatement ((Statement) object);
		} else if (object is_of Expression) {
			visitExpression ((Expression) object);
		} else if (object is_of Type) {
			visitType ((Type) object);
		} else if (object is_of File) {
			visitFile ((File) object);
		} else if (object is_of Token) {
			visitToken ((Token) object);
		} else {
			error (object.get_token (), "Unsupported type: ", object.class.class_name);
		}
	}

	void visitDeclaration (Declaration decl) {
		if (decl is_of ArgumentDeclaration) {
			visitArgumentDeclaration (decl);
		} else if (decl is_of ClassDeclaration) {
			visitClassDeclaration (decl);
		} else if (decl is_of ConstructorDeclaration) {
			visitConstructorDeclaration (decl);
		} else if (decl is_of DestructorDeclaration) {
			visitDestructorDeclaration (decl);
		} else if (decl is_of FunctionDeclaration) {
			visitFunctionDeclaration (decl);
		} else if (decl is_of InterfaceDeclaration) {
			visitInterfaceDeclaration (decl);
		} else if (decl is_of StructDeclaration) {
			visitStructDeclaration (decl);
		} else if (decl is_of TypeDeclaration) {
			visitTypeDeclaration (decl);
		} else if (decl is_of VariableDeclaration) {
			visitVariableDeclaration (decl);
		} else {
			error (decl.get_token (), "Unsupported type: ", decl.class.class_name);
		}
	}

	void visitStatement (Statement stat) {
		if (stat is_of BreakStatement) {
			visitBreakStatement (stat);
		} else if (stat is_of CaseStatement) {
			visitCaseStatement (stat);
		} else if (stat is_of CatchStatement) {
			visitCatchStatement (stat);
		} else if (stat is_of CompoundStatement) {
			visitCompoundStatement (stat);
		} else if (stat is_of DeleteStatement) {
			visitDeleteStatement (stat);
		} else if (stat is_of DoStatement) {
			visitDoStatement (stat);
		} else if (stat is_of ExpressionStatement) {
			visitExpressionStatement (stat);
		} else if (stat is_of FinallyStatement) {
			visitFinallyStatement (stat);
		} else if (stat is_of ForStatement) {
			visitForStatement (stat);
		} else if (stat is_of IfStatement) {
			visitIfStatement (stat);
		} else if (stat is_of ReturnStatement) {
			visitReturnStatement (stat);
		} else if (stat is_of SwitchStatement) {
			visitSwitchStatement (stat);
		} else if (stat is_of ThrowStatement) {
			visitThrowStatement (stat);
		} else if (stat is_of TryStatement) {
			visitTryStatement (stat);
		} else if (stat is_of WhileStatement) {
			visitWhileStatement (stat);
		} else {
			error (stat.get_token (), "Unsupported type: ", stat.class.class_name);
		}
	}

	void visitExpression (Expression expr) {
		if (expr is_of BinaryExpression) {
			visitBinaryExpression (expr);
		} else if (expr is_of CastExpression) {
			visitCastExpression (expr);
		} else if (expr is_of ConditionalExpression) {
			visitConditionalExpression (expr);
		} else if (expr is_of IsOfExpression) {
			visitIsOfExpression (expr);
		} else if (expr is_of FunctionCallExpression) {
			visitFunctionCallExpression (expr);
		} else if (expr is_of NestedExpression) {
			visitNestedExpression (expr);
		} else if (expr is_of NewExpression) {
			visitNewExpression (expr);
		} else if (expr is_of NullExpression) {
			visitNullExpression (expr);
		} else if (expr is_of SizeExpression) {
			visitSizeExpression (expr);
		} else if (expr is_of SuperExpression) {
			visitSuperExpression (expr);
		} else if (expr is_of TokenExpression) {
			visitTokenExpression (expr);
		} else if (expr is_of UnaryExpression) {
			visitUnaryExpression (expr);
		} else if (expr is_of VarArgExpression) {
			visitVarArgExpression (expr);
		} else {
			error (expr.get_token (), "Unsupported type: ", expr.class.class_name);
		}
	}

	void visitType (Type type) {
		if (type is_of ArrayType) {
			visitArrayType (type);
		} else if (type is_of FunctionType) {
			visitFunctionType (type);
		} else if (type is_of ObjectType) {
			visitObjectType (type);
		} else if (type is_of PrimitiveType) {
			visitPrimitiveType (type);
		} else {
			error (type.get_token (), "Unsupported type: ", type.class.class_name);
		}
	}

	void visitArgumentDeclaration (Declaration decl) {}
	void visitClassDeclaration (Declaration decl) {}
	void visitConstructorDeclaration (Declaration decl) {}
	void visitDestructorDeclaration (Declaration decl) {}
	void visitFunctionDeclaration (Declaration decl) {}
	void visitInterfaceDeclaration (Declaration decl) {}
	void visitStructDeclaration (Declaration decl) {}
	void visitTypeDeclaration (Declaration decl) {}
	void visitVariableDeclaration (Declaration decl) {}

	void visitBreakStatement (Statement stat) {}
	void visitCaseStatement (Statement stat) {}
	void visitCatchStatement (Statement stat) {}
	void visitCompoundStatement (Statement stat) {}
	void visitDeleteStatement (Statement stat) {}
	void visitDoStatement (Statement stat) {}
	void visitExpressionStatement (Statement stat) {}
	void visitFinallyStatement (Statement stat) {}
	void visitForEachStatement (Statement stat) {}
	void visitForStatement (Statement stat) {}
	void visitIfStatement (Statement stat) {}
	void visitReturnStatement (Statement stat) {}
	void visitSwitchStatement (Statement stat) {}
	void visitThrowStatement (Statement stat) {}
	void visitTryStatement (Statement stat) {}
	void visitWhileStatement (Statement stat) {}

	void visitBinaryExpression (Expression expr) {}
	void visitCastExpression (Expression expr) {}
	void visitConditionalExpression (Expression expr) {}
	void visitIsOfExpression (Expression expr) {}
	void visitFunctionCallExpression (Expression expr) {}
	void visitNestedExpression (Expression expr) {}
	void visitNewExpression (Expression expr) {}
	void visitNullExpression (Expression expr) {}
	void visitSizeExpression (Expression expr) {}
	void visitSuperExpression (Expression expr) {}
	void visitTokenExpression (Expression expr) {}
	void visitUnaryExpression (Expression expr) {}
	void visitVarArgExpression (Expression expr) {}

	void visitArrayType (Type type) {}
	void visitFunctionType (Type type) {}
	void visitObjectType (Type type) {}
	void visitPrimitiveType (Type type) {}

	void visitFile (File file) {}

	void visitToken (Token token) {}
}
