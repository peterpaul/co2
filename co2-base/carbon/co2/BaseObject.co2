["co2/Object.h"] {
	class Object {
		Class class;

		Object () {
		}

		~Object () {
		}
	}

	class Class : Object {
		int object_size;
		char * class_name;
	}

	int true, false;
}

["co2/utils.h"] {
	unsigned hash_function(char *str);
}

["co2/Interface.h"] {
	class Interface : Object {
		char * name;
		Interface next;
	}
}

["co2/Singleton.h"] {
	class Singleton : Object {
		Object instance () {
			return null;
		}
	}
}

["co2/exception.h"] {
	struct ExceptionStack {
		ExceptionStack *previous;
		char *ex_file;
		int ex_line;
		char *ex_function;
	}
	ExceptionStack *ex_stack;
}

["string.h"] {
	int strlen (char[] str);
	char *strcpy(char *dest, char *src);
	char *strncpy(char *dest, char *src, int n);
	char *strstr(char *haystack, char *needle);
	char *strdup(char *s);
	char *strtok_r(char *str, char *delim, char **saveptr);
	int strcmp(char *s1, char *s2);
}

["stdlib.h"] {
	void *malloc(int size);
	void *calloc(int nmemb, int size);
	void *realloc(void *ptr, int size);
	void free(void *ptr);
	int random();
}

["stdarg.h"] {
	void va_copy(va_list dest, va_list src);
	void va_end(va_list va);
}

["stdio.h"] {
	typedef FILE = void;
	int printf(char *format, ...);
	int fprintf(FILE *stream, char *format, ...);
	int snprintf(char *str, int size, char *format, ...);
	int vsnprintf(char *str, int size, char *format, va_list ap);
	FILE *stdout, stderr;
}

include co2/String

class BaseObject : Object {
	String toString () {
		return new String ("%s at %p", class.class_name, self);
	}

	Class getClass () {
		return class;
	}

	unsigned hashCode () {
		return (unsigned) self;
	}

	int equals (BaseObject other) {
		return self == other;
	}
}
