/*
 * libco2-base Library with basic datatypes in CO2/carbon
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/BaseObject
include co2/ReleasePoolItem
include co2/Exception

unsigned releasePoolHashSize = 1223;

class ReleasePool : BaseObject {
	ReleasePool parent;
	ReleasePoolItem[] hashmap;

	ReleasePool() {
		parent = current_release_pool;
		current_release_pool = self;
		hashmap = calloc(sizeof(ReleasePoolItem), releasePoolHashSize);
	}

	~ReleasePool() {
		unsigned i;
		for (i = 0; i < releasePoolHashSize; i += 1) {
			ReleasePoolItem list = hashmap[i];
			hashmap[i] = null;
			if (list) list.clearList();
		}
		free (hashmap);
		hashmap = null;

		current_release_pool = parent;
		parent = null;
	}

	RefObject add(RefObject anItem) {
		unsigned index = (unsigned) anItem % releasePoolHashSize;
		ReleasePoolItem item = new ReleasePoolItem (anItem);
		if (hashmap[index] == null) {
			hashmap[index] = item;
		} else {
			hashmap[index] = hashmap[index].add(item);
		}
		return anItem;
	}

	RefObject remove(RefObject anItem) {
		unsigned index = (unsigned) anItem % releasePoolHashSize;
		if (hashmap[index]) {
			hashmap[index] = hashmap[index].remove(anItem);
		//} else {
		//	throw new Exception();
		}
		return anItem;
	}
}

ReleasePool current_release_pool;
