/*
 * libco2-base Library with basic datatypes in CO2/carbon
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/RefObject
include co2/ArrayList

int strnlen__(char[] str, int n)
{
	int i = 0;
	while ((int) str[i] && i < n) i += 1;
	return i;
}

class String : RefObject {
	char[] data;
	int length, max;
/*
	String.from_file (String filename) {
		super ();
		// TODO
	}
*/
	String (char[] format, ...) {
		super ();
		int n, size = strlen (format) + 1;
		data = malloc (size);
		max = size;

		while (1) {
			va_list ap2;
			va_copy (ap2, ...);
			n = vsnprintf(data, size, format, ap2);
			if (n > -1) {
				if (n < size) break;
				else size = n + 1;
			} else {
				size *= 2;
			}
			ensure (size);
			va_end(ap2);
		}
		if (n > -1) {
			length = n;
		} else {
			length = strlen (data);
		}
	}

	String.varArg (char[] format, va_list* args) {
		super ();
		int n, size = strlen (format) + 1;
		data = malloc (size);
		max = size;

		while (1) {
			va_list ap2;
			va_copy (ap2, *args);
			n = vsnprintf(data, size, format, ap2);
			if (n > -1) {
				if (n < size) break;
				else size = n + 1;
			} else {
				size *= 2;
			}
			ensure (size);
			va_end(ap2);
		}
		if (n > -1) {
			length = n;
		} else {
			length = strlen (data);
		}
	}

	~String() {
		free (data);
		data = null;
	}

	String resize (int size) {
		data = realloc (data, size);
		max = size;
		return self;
	}

	String ensure (int size) {
		if (size > max) return resize(size);
		return self;
	}

	String append (String str) {
		ensure (length + str.length + 1);
		strcpy (&data[length], str.data);
		length += str.length;
		return self;
	}

	String append_str (char[] format, ...) {
		int n, nn = strlen (format);
		ensure (length + nn + 1);
		while (1) {
			va_list ap2;
			va_copy (ap2, ...);
			ensure (length + nn);
			n = vsnprintf (&data[length], nn, format, ap2);
			if (n > -1 && n < nn) break;
			if (n > -1) nn = n + 1;
			else nn *= 2;
			va_end (ap2);
		}
		if (n > -1) length += n;
		else length = strlen (data);
		return self;
	}

	String append_str_n (char[] str, int n) {
		if (n == 0) return self;
		int nn = strnlen__(str, n);
		ensure (length + nn + 1);
		strncpy (&data[length], str, nn);
		length += nn;
		return self;
	}

	String replace (String that, String this) {
		String orig = new String ("%s", data);
		length = 0;
		int curr = 0;
		int prev = 0;
		char *next;
		while ((next = strstr (&orig.data[curr], that.data))) {
			while (&orig.data[curr] != next) curr += 1;
			append_str_n (&orig.data[prev], curr - prev);
			append (this);
			curr += that.length;
			prev = curr;
		}
		append_str (&orig.data[prev]);
		delete orig;
		return self;
	}

	int fprint (FILE * fp) {
		return fprintf (fp, "%s", data);
	}

	int snprint (char[] str, int size) {
		return snprintf (str, size, "%s", data);
	}

	List split (char[] delim) {
		List list = new ArrayList ();
		char[] saveptr;
		char[] token;
		char[] data_bak = strdup (data);
		char[] str = data_bak;
		do {
			token = strtok_r (str, delim, &saveptr);
			if (token == null) break;
			list.add (new String ("%s", token));
		} while ((str = null));
		delete data_bak;
		return list;
	}

	unsigned hashCode () {
		return hash_function (data);
	}

	int equals (BaseObject other) {
		return strcmp (data, ((String )other).data) == 0;
	}

	String toString () {
		String retval = super ();
		retval.append_str (" \"%s\"", data);
	}
}
