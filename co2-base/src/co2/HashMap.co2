/*
 * libco2-base Library with basic datatypes in CO2/carbon
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/Map
include co2/RefObject
include co2/Array
include co2/HashMapIterator

class HashMap : RefObject, Map {
	Array entries;
	unsigned length;

	HashMap (unsigned size) {
		super ();
		entries = new Array (size);
		entries.retain ();
		length = 0;
	}

	~HashMap () {
		entries.release ();
	}

	unsigned nextIndex (unsigned index) {
		return (index + 1) % entries.size;

	}

	unsigned getIndexFor (RefObject key) {
		unsigned index = key.hashCode () % entries.size;
		KeyValuePair entry;
		while ((entry = (KeyValuePair) entries.get (index))) {
			if (entry.key.equals (key)) {
				return index;
			}
			index = nextIndex (index);
		}
		return index;
	}

	RefObject get (RefObject key) {
		unsigned index = getIndexFor (key);
		KeyValuePair entry = (KeyValuePair) entries.get (index);
		return entry ? entry.value : null;
	}

	RefObject put (RefObject key, RefObject value) {
		unsigned index = getIndexFor (key);
		KeyValuePair entry = (KeyValuePair) entries.get (index);
		if (entry) {
			length -= 1;
		}
		entry = new KeyValuePair (key, value);
		entries.set (index, entry);
		length += 1;
		return value;
	}

	RefObject remove (RefObject key) {
		length -= 1;
		unsigned index = getIndexFor (key);
		KeyValuePair entry = (KeyValuePair) entries.get (index);
		if (entry) {
			RefObject result = entry.value.retain ();
			entries.set (index, null);
			return result.autoRelease ();
		} else {
			return null;
		}		
	}

	unsigned size () {
		return length;		
	}

	Iterator iterator () {
		return new HashMapIterator (self);
	}
}
