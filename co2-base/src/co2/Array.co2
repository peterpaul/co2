/*
 * libco2-base Library with basic datatypes in CO2/carbon
 *
 * Copyright (C) 2011,2012 Peterpaul Taekele Klein Haneveld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include co2/RefObject
include co2/OutOfMemoryException
include co2/IndexOutOfBoundsException

class Array : RefObject {
	unsigned size;
	RefObject[] data;

	Array (unsigned size) {
		RefObject[] data = calloc (size, sizeof (RefObject));
		if (data == null) {
			throw new OutOfMemoryException ();
		}
		self.data = data;
		self.size = size;
	}

	~Array () {
		unsigned index;
		for (index = 0; index < size; index += 1) {
			data[index]?.release ();
		}
	}

	RefObject get (unsigned index) {
		if (index >= size) {
			throw new IndexOutOfBoundsException (index, size);
		}
		return data[index];
	}

	RefObject set (unsigned index, RefObject item) {
		if (index >= size) {
			throw new IndexOutOfBoundsException (index, size);
		}
		item?.retain ();
		data[index]?.release ();
		return data[index] = item;
	}

	void resize (unsigned size) {
		unsigned index;
		// TODO release or throw Exception?
		if (size < self.size) {
			for (index = size; index < self.size; index += 1) {
				data[index]?.release ();
			}
		}
		// reallocate memory
		RefObject[] data = realloc (self.data, sizeof (RefObject) * size);
		if (data == null) {
			throw new OutOfMemoryException ();
		}
		self.data = data;
		// clean
		if (size > self.size) {
			for (index = self.size; index < size; index += 1) {
				data[index] = null;
			}
		}
		self.size = size;
	}
}
